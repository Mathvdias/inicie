// Mocks generated by Mockito 5.4.6 from annotations
// in inicie/test/features/tasks/presentation/widgets/add_edit_task_sheet_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:inicie/features/tasks/data/models/task_model.dart' as _i3;
import 'package:inicie/features/tasks/presentation/viewmodels/i_task_viewmodel.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ITaskViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskViewModel extends _i1.Mock implements _i2.ITaskViewModel {
  MockITaskViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Task> get tasks =>
      (super.noSuchMethod(Invocation.getter(#tasks), returnValue: <_i3.Task>[])
          as List<_i3.Task>);

  @override
  _i2.ViewState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i2.ViewState.idle,
          )
          as _i2.ViewState);

  @override
  bool get hasMoreTasks =>
      (super.noSuchMethod(Invocation.getter(#hasMoreTasks), returnValue: false)
          as bool);

  @override
  String get errorMessage =>
      (super.noSuchMethod(
            Invocation.getter(#errorMessage),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#errorMessage),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadTasks() =>
      (super.noSuchMethod(
            Invocation.method(#loadTasks, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> loadMoreTasks() =>
      (super.noSuchMethod(
            Invocation.method(#loadMoreTasks, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addTask({
    required String? title,
    String? description,
    DateTime? reminderDateTime,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [], {
              #title: title,
              #description: description,
              #reminderDateTime: reminderDateTime,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateTask(_i3.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> toggleTaskCompletion(_i3.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [task]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [taskId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllTasks, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
